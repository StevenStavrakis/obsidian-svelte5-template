"use strict";const s=require("obsidian"),l={mySetting:"default"};class c extends s.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("dice","Sample Plugin",e=>{new s.Notice("This is a notice!")}).addClass("my-plugin-ribbon-class"),this.addStatusBarItem().setText("Status Bar Text"),this.addCommand({id:"open-sample-modal-simple",name:"Open sample modal (simple)",callback:()=>{new i(this.app).open()}}),this.addCommand({id:"sample-editor-command",name:"Sample editor command",editorCallback:(e,o)=>{console.log(e.getSelection()),e.replaceSelection("Sample Editor Command")}}),this.addCommand({id:"open-sample-modal-complex",name:"Open sample modal (complex)",checkCallback:e=>{if(this.app.workspace.getActiveViewOfType(s.MarkdownView))return e||new i(this.app).open(),!0}}),this.addSettingTab(new d(this.app,this)),this.registerDomEvent(document,"click",e=>{console.log("click",e)}),this.registerInterval(window.setInterval(()=>console.log("setInterval"),5*60*1e3))}onunload(){}async loadSettings(){this.settings=Object.assign({},l,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}}class i extends s.Modal{constructor(t){super(t)}onOpen(){const{contentEl:t}=this;t.setText("Woah!")}onClose(){const{contentEl:t}=this;t.empty()}}class d extends s.PluginSettingTab{constructor(t,a){super(t,a),this.plugin=a}display(){const{containerEl:t}=this;t.empty(),new s.Setting(t).setName("Setting #1").setDesc("It's a secret").addText(a=>a.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async e=>{this.plugin.settings.mySetting=e,await this.plugin.saveSettings()}))}}module.exports=c;
